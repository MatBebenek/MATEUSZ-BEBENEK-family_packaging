// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Family {
  id        String  @id @default(cuid())
  name      String  @unique
  members   User[]
  items     Item[]
  locations Location[]
  journeys  Journey[]
}

model Journey {
  id        String  @id @default(cuid())
  name      String
  startDate DateTime?
  endDate   DateTime?
  familyId  String  @map("family_id")
  items     Item[]

  family    Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model Item {
  id        String  @id @default(cuid())
  name      String
  locationId  String @map("location_id")
  families  Family[]
  journeys  Journey[]
  status    String @default("NOT_PREPARED")
  type      String?

  location  Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Location {
  id        String  @id @default(cuid())
  name      String
  families  Family[]
  items     Item[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  families      Family[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


